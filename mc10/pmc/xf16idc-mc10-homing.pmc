; Homing PLC for Axis 1 (PLC 8)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P800 - homing state (homing, not homing)
; P801 - homing status (limit search, home search, post-home move)
; P802 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P800 = 0

; Homing Status P Variable
P801 = 0

DEL GAT
OPEN PLC8 CLEAR
P801 = 1

;---- Configuring State ----
P800=1
;Save high soft limits to P variables Pxx04..x19
P804=I113
;Save the low soft limits to P variables Pxx20..x35
P820=I114
;Save the home capture flags to P variables Pxx36..x51
P836=I7012
;Store value to use in moving off a flag in P variables Pxx52..x67
P852=10
;Save the limit flags to P variables Pxx68..x83
P868=I124
;Save the current position to P variables Pxx84..x99
P884=M162
;Clear the soft limits
I113=0
I114=0

if (P801=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P801=1)
		P800=8
		; Execute the move commands
		M172=100000000*(-I123/ABS(I123))
		cmd "#1J:*"
		; Wait for the move to complete
		I5511 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5511 > 0)
		endw
		I5511 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M140=0) ; At least one motor should not be In Position
		and (M142=0) ; No following errors should be set for any motor
		and (I5511 > 0) ; Check for timeout
		and (P801 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M142=1) ; If a motor hit a following error
			P801 = 4
		endif
		if (I5511<0 or I5511=0) ; If we timed out
			P801 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P801=1)
		P886=(P886-M162)/(I108*32)-(I126/16)
	endif

	;---- Homing State ----
	if (P801=1)
		P800=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I123<0)
      I7013=1
    else
      I7013=2
    endif             
		; Execute the move commands
		I7012=P852
		cmd "#1hm"
		; Wait for the move to complete
		I5511 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5511 > 0)
		endw
		I5511 = 600000 * 8388608/I10 ; Now start checking the conditions
    P805 = 0
		while (M140=0) ; At least one motor should not be In Position
		and (M142=0) ; No following errors should be set for any motor
		and (P805=0) ; Should not stop on position limit for selected motors
		and (I5511 > 0) ; Check for timeout
		and (P801 = 1) ; Check that we didn't abort
    if (I123 < 0 and M132 = 1)
      P805 = 1
    endif
    if (I123 > 0 and M131 = 1)
      P805 = 1
    endif
		endw
		; Check why we left the while loop
		if (M142=1) ; If a motor hit a following error
			P801 = 4
		endif
		if (M130=1) ; If a motor hit a limit
			P801 = 5
		endif
		if (I5511<0 or I5511=0) ; If we timed out
			P801 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P801=1)
	and (M145=0)
		P801=6
	endif

	;---- PostHomeMove State ----
	if (P801=1)
    ; Check the type of post-home move
    if (P802 = 0)
      P800=5
      ; Execute the move commands
      M172=P884/(I108*32)
      cmd "#1J=*"
      ; Wait for the move to complete
      I5511 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5511 > 0)
      endw
      I5511 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M140=0) ; At least one motor should not be In Position
      and (M142=0) ; No following errors should be set for any motor
      and (M130=0) ; Should not stop on position limit for selected motors
      and (I5511 > 0) ; Check for timeout
      and (P801 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M142=1) ; If a motor hit a following error
        P801 = 4
      endif
      if (M130=1) ; If a motor hit a limit
        P801 = 5
      endif
      if (I5511<0 or I5511=0) ; If we timed out
        P801 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P801 = 1)
	;If we've got this far without failing, set status and state done
	P801=0
	P800=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M142=0)
	cmd "#1J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I113=P804
;Restore the low soft limits from P variables Pxx20..x35
I114=P820
;Restore the home capture flags from P variables Pxx36..x51
I7012=P836
;Restore the limit flags to P variables Pxx68..x83
I124=P868

DISABLE PLC8
CLOSE


; Homing PLC for Axis 2 (PLC 9)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P900 - homing state (homing, not homing)
; P901 - homing status (limit search, home search, post-home move)
; P902 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P900 = 0

; Homing Status P Variable
P901 = 0

DEL GAT
OPEN PLC9 CLEAR
P901 = 1

;---- Configuring State ----
P900=1
;Save high soft limits to P variables Pxx04..x19
P904=I213
;Save the low soft limits to P variables Pxx20..x35
P920=I214
;Save the home capture flags to P variables Pxx36..x51
P936=I7022
;Store value to use in moving off a flag in P variables Pxx52..x67
P952=10
;Save the limit flags to P variables Pxx68..x83
P968=I224
;Save the current position to P variables Pxx84..x99
P984=M262
;Clear the soft limits
I213=0
I214=0

if (P901=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P901=1)
		P900=8
		; Execute the move commands
		M272=100000000*(-I223/ABS(I223))
		cmd "#2J:*"
		; Wait for the move to complete
		I5512 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5512 > 0)
		endw
		I5512 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M240=0) ; At least one motor should not be In Position
		and (M242=0) ; No following errors should be set for any motor
		and (I5512 > 0) ; Check for timeout
		and (P901 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M242=1) ; If a motor hit a following error
			P901 = 4
		endif
		if (I5512<0 or I5512=0) ; If we timed out
			P901 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P901=1)
		P986=(P986-M262)/(I208*32)-(I226/16)
	endif

	;---- Homing State ----
	if (P901=1)
		P900=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I223<0)
      I7023=1
    else
      I7023=2
    endif             
		; Execute the move commands
		I7022=P952
		cmd "#2hm"
		; Wait for the move to complete
		I5512 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5512 > 0)
		endw
		I5512 = 600000 * 8388608/I10 ; Now start checking the conditions
    P905 = 0
		while (M240=0) ; At least one motor should not be In Position
		and (M242=0) ; No following errors should be set for any motor
		and (P905=0) ; Should not stop on position limit for selected motors
		and (I5512 > 0) ; Check for timeout
		and (P901 = 1) ; Check that we didn't abort
    if (I223 < 0 and M232 = 1)
      P905 = 1
    endif
    if (I223 > 0 and M231 = 1)
      P905 = 1
    endif
		endw
		; Check why we left the while loop
		if (M242=1) ; If a motor hit a following error
			P901 = 4
		endif
		if (M230=1) ; If a motor hit a limit
			P901 = 5
		endif
		if (I5512<0 or I5512=0) ; If we timed out
			P901 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P901=1)
	and (M245=0)
		P901=6
	endif

	;---- PostHomeMove State ----
	if (P901=1)
    ; Check the type of post-home move
    if (P902 = 0)
      P900=5
      ; Execute the move commands
      M272=P984/(I208*32)
      cmd "#2J=*"
      ; Wait for the move to complete
      I5512 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5512 > 0)
      endw
      I5512 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M240=0) ; At least one motor should not be In Position
      and (M242=0) ; No following errors should be set for any motor
      and (M230=0) ; Should not stop on position limit for selected motors
      and (I5512 > 0) ; Check for timeout
      and (P901 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M242=1) ; If a motor hit a following error
        P901 = 4
      endif
      if (M230=1) ; If a motor hit a limit
        P901 = 5
      endif
      if (I5512<0 or I5512=0) ; If we timed out
        P901 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P901 = 1)
	;If we've got this far without failing, set status and state done
	P901=0
	P900=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M242=0)
	cmd "#2J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I213=P904
;Restore the low soft limits from P variables Pxx20..x35
I214=P920
;Restore the home capture flags from P variables Pxx36..x51
I7022=P936
;Restore the limit flags to P variables Pxx68..x83
I224=P968

DISABLE PLC9
CLOSE


; Homing PLC for Axis 3 (PLC 10)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1000 - homing state (homing, not homing)
; P1001 - homing status (limit search, home search, post-home move)
; P1002 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1000 = 0

; Homing Status P Variable
P1001 = 0

DEL GAT
OPEN PLC10 CLEAR
P1001 = 1

;---- Configuring State ----
P1000=1
;Save high soft limits to P variables Pxx04..x19
P1004=I313
;Save the low soft limits to P variables Pxx20..x35
P1020=I314
;Save the home capture flags to P variables Pxx36..x51
P1036=I7032
;Store value to use in moving off a flag in P variables Pxx52..x67
P1052=10
;Save the limit flags to P variables Pxx68..x83
P1068=I324
;Save the current position to P variables Pxx84..x99
P1084=M362
;Clear the soft limits
I313=0
I314=0

if (P1001=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1001=1)
		P1000=8
		; Execute the move commands
		M372=100000000*(-I323/ABS(I323))
		cmd "#3J:*"
		; Wait for the move to complete
		I5611 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5611 > 0)
		endw
		I5611 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M340=0) ; At least one motor should not be In Position
		and (M342=0) ; No following errors should be set for any motor
		and (I5611 > 0) ; Check for timeout
		and (P1001 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M342=1) ; If a motor hit a following error
			P1001 = 4
		endif
		if (I5611<0 or I5611=0) ; If we timed out
			P1001 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1001=1)
		P1086=(P1086-M362)/(I308*32)-(I326/16)
	endif

	;---- Homing State ----
	if (P1001=1)
		P1000=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I323<0)
      I7033=1
    else
      I7033=2
    endif             
		; Execute the move commands
		I7032=P1052
		cmd "#3hm"
		; Wait for the move to complete
		I5611 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5611 > 0)
		endw
		I5611 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1005 = 0
		while (M340=0) ; At least one motor should not be In Position
		and (M342=0) ; No following errors should be set for any motor
		and (P1005=0) ; Should not stop on position limit for selected motors
		and (I5611 > 0) ; Check for timeout
		and (P1001 = 1) ; Check that we didn't abort
    if (I323 < 0 and M332 = 1)
      P1005 = 1
    endif
    if (I323 > 0 and M331 = 1)
      P1005 = 1
    endif
		endw
		; Check why we left the while loop
		if (M342=1) ; If a motor hit a following error
			P1001 = 4
		endif
		if (M330=1) ; If a motor hit a limit
			P1001 = 5
		endif
		if (I5611<0 or I5611=0) ; If we timed out
			P1001 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1001=1)
	and (M345=0)
		P1001=6
	endif

	;---- PostHomeMove State ----
	if (P1001=1)
    ; Check the type of post-home move
    if (P1002 = 0)
      P1000=5
      ; Execute the move commands
      M372=P1084/(I308*32)
      cmd "#3J=*"
      ; Wait for the move to complete
      I5611 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5611 > 0)
      endw
      I5611 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M340=0) ; At least one motor should not be In Position
      and (M342=0) ; No following errors should be set for any motor
      and (M330=0) ; Should not stop on position limit for selected motors
      and (I5611 > 0) ; Check for timeout
      and (P1001 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M342=1) ; If a motor hit a following error
        P1001 = 4
      endif
      if (M330=1) ; If a motor hit a limit
        P1001 = 5
      endif
      if (I5611<0 or I5611=0) ; If we timed out
        P1001 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1001 = 1)
	;If we've got this far without failing, set status and state done
	P1001=0
	P1000=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M342=0)
	cmd "#3J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I313=P1004
;Restore the low soft limits from P variables Pxx20..x35
I314=P1020
;Restore the home capture flags from P variables Pxx36..x51
I7032=P1036
;Restore the limit flags to P variables Pxx68..x83
I324=P1068

DISABLE PLC10
CLOSE


; Homing PLC for Axis 4 (PLC 11)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1100 - homing state (homing, not homing)
; P1101 - homing status (limit search, home search, post-home move)
; P1102 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1100 = 0

; Homing Status P Variable
P1101 = 0

DEL GAT
OPEN PLC11 CLEAR
P1101 = 1

;---- Configuring State ----
P1100=1
;Save high soft limits to P variables Pxx04..x19
P1104=I413
;Save the low soft limits to P variables Pxx20..x35
P1120=I414
;Save the home capture flags to P variables Pxx36..x51
P1136=I7042
;Store value to use in moving off a flag in P variables Pxx52..x67
P1152=10
;Save the limit flags to P variables Pxx68..x83
P1168=I424
;Save the current position to P variables Pxx84..x99
P1184=M462
;Clear the soft limits
I413=0
I414=0

if (P1101=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1101=1)
		P1100=8
		; Execute the move commands
		M472=100000000*(-I423/ABS(I423))
		cmd "#4J:*"
		; Wait for the move to complete
		I5612 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5612 > 0)
		endw
		I5612 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M440=0) ; At least one motor should not be In Position
		and (M442=0) ; No following errors should be set for any motor
		and (I5612 > 0) ; Check for timeout
		and (P1101 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M442=1) ; If a motor hit a following error
			P1101 = 4
		endif
		if (I5612<0 or I5612=0) ; If we timed out
			P1101 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1101=1)
		P1186=(P1186-M462)/(I408*32)-(I426/16)
	endif

	;---- Homing State ----
	if (P1101=1)
		P1100=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I423<0)
      I7043=1
    else
      I7043=2
    endif             
		; Execute the move commands
		I7042=P1152
		cmd "#4hm"
		; Wait for the move to complete
		I5612 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5612 > 0)
		endw
		I5612 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1105 = 0
		while (M440=0) ; At least one motor should not be In Position
		and (M442=0) ; No following errors should be set for any motor
		and (P1105=0) ; Should not stop on position limit for selected motors
		and (I5612 > 0) ; Check for timeout
		and (P1101 = 1) ; Check that we didn't abort
    if (I423 < 0 and M432 = 1)
      P1105 = 1
    endif
    if (I423 > 0 and M431 = 1)
      P1105 = 1
    endif
		endw
		; Check why we left the while loop
		if (M442=1) ; If a motor hit a following error
			P1101 = 4
		endif
		if (M430=1) ; If a motor hit a limit
			P1101 = 5
		endif
		if (I5612<0 or I5612=0) ; If we timed out
			P1101 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1101=1)
	and (M445=0)
		P1101=6
	endif

	;---- PostHomeMove State ----
	if (P1101=1)
    ; Check the type of post-home move
    if (P1102 = 0)
      P1100=5
      ; Execute the move commands
      M472=P1184/(I408*32)
      cmd "#4J=*"
      ; Wait for the move to complete
      I5612 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5612 > 0)
      endw
      I5612 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M440=0) ; At least one motor should not be In Position
      and (M442=0) ; No following errors should be set for any motor
      and (M430=0) ; Should not stop on position limit for selected motors
      and (I5612 > 0) ; Check for timeout
      and (P1101 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M442=1) ; If a motor hit a following error
        P1101 = 4
      endif
      if (M430=1) ; If a motor hit a limit
        P1101 = 5
      endif
      if (I5612<0 or I5612=0) ; If we timed out
        P1101 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1101 = 1)
	;If we've got this far without failing, set status and state done
	P1101=0
	P1100=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M442=0)
	cmd "#4J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I413=P1104
;Restore the low soft limits from P variables Pxx20..x35
I414=P1120
;Restore the home capture flags from P variables Pxx36..x51
I7042=P1136
;Restore the limit flags to P variables Pxx68..x83
I424=P1168

DISABLE PLC11
CLOSE


; Homing PLC for Axis 5 (PLC 12)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1200 - homing state (homing, not homing)
; P1201 - homing status (limit search, home search, post-home move)
; P1202 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1200 = 0

; Homing Status P Variable
P1201 = 0

DEL GAT
OPEN PLC12 CLEAR
P1201 = 1

;---- Configuring State ----
P1200=1
;Save high soft limits to P variables Pxx04..x19
P1204=I513
;Save the low soft limits to P variables Pxx20..x35
P1220=I514
;Save the home capture flags to P variables Pxx36..x51
P1236=I7112
;Store value to use in moving off a flag in P variables Pxx52..x67
P1252=10
;Save the limit flags to P variables Pxx68..x83
P1268=I524
;Save the current position to P variables Pxx84..x99
P1284=M562
;Clear the soft limits
I513=0
I514=0

if (P1201=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1201=1)
		P1200=8
		; Execute the move commands
		M572=100000000*(-I523/ABS(I523))
		cmd "#5J:*"
		; Wait for the move to complete
		I5711 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5711 > 0)
		endw
		I5711 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M540=0) ; At least one motor should not be In Position
		and (M542=0) ; No following errors should be set for any motor
		and (I5711 > 0) ; Check for timeout
		and (P1201 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M542=1) ; If a motor hit a following error
			P1201 = 4
		endif
		if (I5711<0 or I5711=0) ; If we timed out
			P1201 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1201=1)
		P1286=(P1286-M562)/(I508*32)-(I526/16)
	endif

	;---- Homing State ----
	if (P1201=1)
		P1200=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I523<0)
      I7113=1
    else
      I7113=2
    endif             
		; Execute the move commands
		I7112=P1252
		cmd "#5hm"
		; Wait for the move to complete
		I5711 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5711 > 0)
		endw
		I5711 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1205 = 0
		while (M540=0) ; At least one motor should not be In Position
		and (M542=0) ; No following errors should be set for any motor
		and (P1205=0) ; Should not stop on position limit for selected motors
		and (I5711 > 0) ; Check for timeout
		and (P1201 = 1) ; Check that we didn't abort
    if (I523 < 0 and M532 = 1)
      P1205 = 1
    endif
    if (I523 > 0 and M531 = 1)
      P1205 = 1
    endif
		endw
		; Check why we left the while loop
		if (M542=1) ; If a motor hit a following error
			P1201 = 4
		endif
		if (M530=1) ; If a motor hit a limit
			P1201 = 5
		endif
		if (I5711<0 or I5711=0) ; If we timed out
			P1201 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1201=1)
	and (M545=0)
		P1201=6
	endif

	;---- PostHomeMove State ----
	if (P1201=1)
    ; Check the type of post-home move
    if (P1202 = 0)
      P1200=5
      ; Execute the move commands
      M572=P1284/(I508*32)
      cmd "#5J=*"
      ; Wait for the move to complete
      I5711 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5711 > 0)
      endw
      I5711 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M540=0) ; At least one motor should not be In Position
      and (M542=0) ; No following errors should be set for any motor
      and (M530=0) ; Should not stop on position limit for selected motors
      and (I5711 > 0) ; Check for timeout
      and (P1201 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M542=1) ; If a motor hit a following error
        P1201 = 4
      endif
      if (M530=1) ; If a motor hit a limit
        P1201 = 5
      endif
      if (I5711<0 or I5711=0) ; If we timed out
        P1201 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1201 = 1)
	;If we've got this far without failing, set status and state done
	P1201=0
	P1200=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M542=0)
	cmd "#5J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I513=P1204
;Restore the low soft limits from P variables Pxx20..x35
I514=P1220
;Restore the home capture flags from P variables Pxx36..x51
I7112=P1236
;Restore the limit flags to P variables Pxx68..x83
I524=P1268

DISABLE PLC12
CLOSE


; Homing PLC for Axis 6 (PLC 13)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1300 - homing state (homing, not homing)
; P1301 - homing status (limit search, home search, post-home move)
; P1302 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1300 = 0

; Homing Status P Variable
P1301 = 0

DEL GAT
OPEN PLC13 CLEAR
P1301 = 1

;---- Configuring State ----
P1300=1
;Save high soft limits to P variables Pxx04..x19
P1304=I613
;Save the low soft limits to P variables Pxx20..x35
P1320=I614
;Save the home capture flags to P variables Pxx36..x51
P1336=I7122
;Store value to use in moving off a flag in P variables Pxx52..x67
P1352=10
;Save the limit flags to P variables Pxx68..x83
P1368=I624
;Save the current position to P variables Pxx84..x99
P1384=M662
;Clear the soft limits
I613=0
I614=0

if (P1301=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1301=1)
		P1300=8
		; Execute the move commands
		M672=100000000*(-I623/ABS(I623))
		cmd "#6J:*"
		; Wait for the move to complete
		I5712 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5712 > 0)
		endw
		I5712 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M640=0) ; At least one motor should not be In Position
		and (M642=0) ; No following errors should be set for any motor
		and (I5712 > 0) ; Check for timeout
		and (P1301 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M642=1) ; If a motor hit a following error
			P1301 = 4
		endif
		if (I5712<0 or I5712=0) ; If we timed out
			P1301 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1301=1)
		P1386=(P1386-M662)/(I608*32)-(I626/16)
	endif

	;---- Homing State ----
	if (P1301=1)
		P1300=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I623<0)
      I7123=1
    else
      I7123=2
    endif             
		; Execute the move commands
		I7122=P1352
		cmd "#6hm"
		; Wait for the move to complete
		I5712 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5712 > 0)
		endw
		I5712 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1305 = 0
		while (M640=0) ; At least one motor should not be In Position
		and (M642=0) ; No following errors should be set for any motor
		and (P1305=0) ; Should not stop on position limit for selected motors
		and (I5712 > 0) ; Check for timeout
		and (P1301 = 1) ; Check that we didn't abort
    if (I623 < 0 and M632 = 1)
      P1305 = 1
    endif
    if (I623 > 0 and M631 = 1)
      P1305 = 1
    endif
		endw
		; Check why we left the while loop
		if (M642=1) ; If a motor hit a following error
			P1301 = 4
		endif
		if (M630=1) ; If a motor hit a limit
			P1301 = 5
		endif
		if (I5712<0 or I5712=0) ; If we timed out
			P1301 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1301=1)
	and (M645=0)
		P1301=6
	endif

	;---- PostHomeMove State ----
	if (P1301=1)
    ; Check the type of post-home move
    if (P1302 = 0)
      P1300=5
      ; Execute the move commands
      M672=P1384/(I608*32)
      cmd "#6J=*"
      ; Wait for the move to complete
      I5712 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5712 > 0)
      endw
      I5712 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M640=0) ; At least one motor should not be In Position
      and (M642=0) ; No following errors should be set for any motor
      and (M630=0) ; Should not stop on position limit for selected motors
      and (I5712 > 0) ; Check for timeout
      and (P1301 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M642=1) ; If a motor hit a following error
        P1301 = 4
      endif
      if (M630=1) ; If a motor hit a limit
        P1301 = 5
      endif
      if (I5712<0 or I5712=0) ; If we timed out
        P1301 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1301 = 1)
	;If we've got this far without failing, set status and state done
	P1301=0
	P1300=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M642=0)
	cmd "#6J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I613=P1304
;Restore the low soft limits from P variables Pxx20..x35
I614=P1320
;Restore the home capture flags from P variables Pxx36..x51
I7122=P1336
;Restore the limit flags to P variables Pxx68..x83
I624=P1368

DISABLE PLC13
CLOSE


; Homing PLC for Axis 7 (PLC 14)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1400 - homing state (homing, not homing)
; P1401 - homing status (limit search, home search, post-home move)
; P1402 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1400 = 0

; Homing Status P Variable
P1401 = 0

DEL GAT
OPEN PLC14 CLEAR
P1401 = 1

;---- Configuring State ----
P1400=1
;Save high soft limits to P variables Pxx04..x19
P1404=I713
;Save the low soft limits to P variables Pxx20..x35
P1420=I714
;Save the home capture flags to P variables Pxx36..x51
P1436=I7132
;Store value to use in moving off a flag in P variables Pxx52..x67
P1452=10
;Save the limit flags to P variables Pxx68..x83
P1468=I724
;Save the current position to P variables Pxx84..x99
P1484=M762
;Clear the soft limits
I713=0
I714=0

if (P1401=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1401=1)
		P1400=8
		; Execute the move commands
		M772=100000000*(-I723/ABS(I723))
		cmd "#7J:*"
		; Wait for the move to complete
		I5811 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5811 > 0)
		endw
		I5811 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M740=0) ; At least one motor should not be In Position
		and (M742=0) ; No following errors should be set for any motor
		and (I5811 > 0) ; Check for timeout
		and (P1401 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M742=1) ; If a motor hit a following error
			P1401 = 4
		endif
		if (I5811<0 or I5811=0) ; If we timed out
			P1401 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1401=1)
		P1486=(P1486-M762)/(I708*32)-(I726/16)
	endif

	;---- Homing State ----
	if (P1401=1)
		P1400=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I723<0)
      I7133=1
    else
      I7133=2
    endif             
		; Execute the move commands
		I7132=P1452
		cmd "#7hm"
		; Wait for the move to complete
		I5811 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5811 > 0)
		endw
		I5811 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1405 = 0
		while (M740=0) ; At least one motor should not be In Position
		and (M742=0) ; No following errors should be set for any motor
		and (P1405=0) ; Should not stop on position limit for selected motors
		and (I5811 > 0) ; Check for timeout
		and (P1401 = 1) ; Check that we didn't abort
    if (I723 < 0 and M732 = 1)
      P1405 = 1
    endif
    if (I723 > 0 and M731 = 1)
      P1405 = 1
    endif
		endw
		; Check why we left the while loop
		if (M742=1) ; If a motor hit a following error
			P1401 = 4
		endif
		if (M730=1) ; If a motor hit a limit
			P1401 = 5
		endif
		if (I5811<0 or I5811=0) ; If we timed out
			P1401 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1401=1)
	and (M745=0)
		P1401=6
	endif

	;---- PostHomeMove State ----
	if (P1401=1)
    ; Check the type of post-home move
    if (P1402 = 0)
      P1400=5
      ; Execute the move commands
      M772=P1484/(I708*32)
      cmd "#7J=*"
      ; Wait for the move to complete
      I5811 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5811 > 0)
      endw
      I5811 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M740=0) ; At least one motor should not be In Position
      and (M742=0) ; No following errors should be set for any motor
      and (M730=0) ; Should not stop on position limit for selected motors
      and (I5811 > 0) ; Check for timeout
      and (P1401 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M742=1) ; If a motor hit a following error
        P1401 = 4
      endif
      if (M730=1) ; If a motor hit a limit
        P1401 = 5
      endif
      if (I5811<0 or I5811=0) ; If we timed out
        P1401 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1401 = 1)
	;If we've got this far without failing, set status and state done
	P1401=0
	P1400=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M742=0)
	cmd "#7J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I713=P1404
;Restore the low soft limits from P variables Pxx20..x35
I714=P1420
;Restore the home capture flags from P variables Pxx36..x51
I7132=P1436
;Restore the limit flags to P variables Pxx68..x83
I724=P1468

DISABLE PLC14
CLOSE


; Homing PLC for Axis 8 (PLC 15)
; 
; This program will home an axis to either the positive or negative limit. The
; homing program performs the following steps:
; 1. Move to the limit switch being used as a reference.
; 2. Perform a homing move away from the limit switch until it deactivates.
; 3. Return to the starting position. 
; 
; Note that the direction set by the home velocity (Ixx23) is opposite to the
; limit switch actually used for homing. This is because the homing movement
; (Step 2 above) is away from the limit, with the controller looking for the
; switch to deactivate to indicate the home position. This is summarised below:
; Home at negative limit -> Positive home velocity
; Home at positive limit -> Negative home velocity
; 
; Wayne Lewis 20140108
; 
; Macros:
; - PLC: PLC number
; - AXIS: motion axis
; - TIMER: PMAC timer to use
; - SERVO: first three digits of axis gate array (I7mn)

; P variables
; P1500 - homing state (homing, not homing)
; P1501 - homing status (limit search, home search, post-home move)
; P1502 - post-home move (0 = return to previous, 1 = stay at zero)

; Initial configuration of state variables.
; Homing State P Variable
P1500 = 0

; Homing Status P Variable
P1501 = 0

DEL GAT
OPEN PLC15 CLEAR
P1501 = 1

;---- Configuring State ----
P1500=1
;Save high soft limits to P variables Pxx04..x19
P1504=I813
;Save the low soft limits to P variables Pxx20..x35
P1520=I814
;Save the home capture flags to P variables Pxx36..x51
P1536=I7142
;Store value to use in moving off a flag in P variables Pxx52..x67
P1552=10
;Save the limit flags to P variables Pxx68..x83
P1568=I824
;Save the current position to P variables Pxx84..x99
P1584=M862
;Clear the soft limits
I813=0
I814=0

if (P1501=1)

	;---- FastSearch State ----
  ; Move to the limit switch
	if (P1501=1)
		P1500=8
		; Execute the move commands
		M872=100000000*(-I823/ABS(I823))
		cmd "#8J:*"
		; Wait for the move to complete
		I5812 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5812 > 0)
		endw
		I5812 = 600000 * 8388608/I10 ; Now start checking the conditions
		while (M840=0) ; At least one motor should not be In Position
		and (M842=0) ; No following errors should be set for any motor
		and (I5812 > 0) ; Check for timeout
		and (P1501 = 1) ; Check that we didn't abort
		endw

		; Check why we left the while loop
		if (M842=1) ; If a motor hit a following error
			P1501 = 4
		endif
		if (I5812<0 or I5812=0) ; If we timed out
			P1501 = 3
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (P1501=1)
		P1586=(P1586-M862)/(I808*32)-(I826/16)
	endif

	;---- Homing State ----
	if (P1501=1)
		P1500=4
    ; Set the capture flag correctly            
    ; If homing direction is negative, we are homing using the positive
    ; limit switch and vice versa.              
    if (I823<0)
      I7143=1
    else
      I7143=2
    endif             
		; Execute the move commands
		I7142=P1552
		cmd "#8hm"
		; Wait for the move to complete
		I5812 = 20 * 8388608/I10 ; Small delay to start moving
		while (I5812 > 0)
		endw
		I5812 = 600000 * 8388608/I10 ; Now start checking the conditions
    P1505 = 0
		while (M840=0) ; At least one motor should not be In Position
		and (M842=0) ; No following errors should be set for any motor
		and (P1505=0) ; Should not stop on position limit for selected motors
		and (I5812 > 0) ; Check for timeout
		and (P1501 = 1) ; Check that we didn't abort
    if (I823 < 0 and M832 = 1)
      P1505 = 1
    endif
    if (I823 > 0 and M831 = 1)
      P1505 = 1
    endif
		endw
		; Check why we left the while loop
		if (M842=1) ; If a motor hit a following error
			P1501 = 4
		endif
		if (M830=1) ; If a motor hit a limit
			P1501 = 5
		endif
		if (I5812<0 or I5812=0) ; If we timed out
			P1501 = 3
		endif
	endif

	;---- Check if all motors have homed ----
	if (P1501=1)
	and (M845=0)
		P1501=6
	endif

	;---- PostHomeMove State ----
	if (P1501=1)
    ; Check the type of post-home move
    if (P1502 = 0)
      P1500=5
      ; Execute the move commands
      M872=P1584/(I808*32)
      cmd "#8J=*"
      ; Wait for the move to complete
      I5812 = 20 * 8388608/I10 ; Small delay to start moving
      while (I5812 > 0)
      endw
      I5812 = 600000 * 8388608/I10 ; Now start checking the conditions
      while (M840=0) ; At least one motor should not be In Position
      and (M842=0) ; No following errors should be set for any motor
      and (M830=0) ; Should not stop on position limit for selected motors
      and (I5812 > 0) ; Check for timeout
      and (P1501 = 1) ; Check that we didn't abort
      endw
      ; Check why we left the while loop
      if (M842=1) ; If a motor hit a following error
        P1501 = 4
      endif
      if (M830=1) ; If a motor hit a limit
        P1501 = 5
      endif
      if (I5812<0 or I5812=0) ; If we timed out
        P1501 = 3
      endif
    endif
	endif

endif

;---- Done ----
if (P1501 = 1)
	;If we've got this far without failing, set status and state done
	P1501=0
	P1500=7
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (M842=0)
	cmd "#8J/"
endif
;Restore the high soft limits from P variables Pxx04..x19
I813=P1504
;Restore the low soft limits from P variables Pxx20..x35
I814=P1520
;Restore the home capture flags from P variables Pxx36..x51
I7142=P1536
;Restore the limit flags to P variables Pxx68..x83
I824=P1568

DISABLE PLC15
CLOSE


