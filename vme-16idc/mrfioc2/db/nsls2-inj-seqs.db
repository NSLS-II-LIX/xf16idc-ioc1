#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/mrf.dbd")
#! DBDEND


record(mbboDirect, "$(LN){}Mode:Prmt-Sel") {
  field(DESC, "LN Permitted TS Modes")
  field(FLNK, "$(LN){}Mode:Prmt-Calc_")
  field(ASG, "OPERATOR")
  field(DTYP, "Soft and restore")
  field(NOBT, "5")
  info(autosaveFields_pass0, "VAL")
}

record(calcout, "$(LN){}Mode:Prmt-Calc_") {
  field(FLNK, "$(INJ){}Mode-RB_")
  field(CALC, "D:=A&(1<<(B-1));E:=D?B:0;D?C:0")
  field(INPB, "$(LN){}Mode-Sel NPP MS")
  field(OUT, "$(LN){Seq}Mask:Rep-SP PP")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
  field(INPA, "$(LN){}Mode:Prmt-Sel NPP MS")
  field(INPC, "$(LN){}Mode-Sel.RVAL")
}

# User Control
record(mbbo, "$(LN){}Mode-Sel") {
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "3")
  field(THVL, "0x21")
  field(FRVL, "0x155")
  field(FVVL, "0x3ff")
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(FRST, "5 Hz")
  field(FVST, "10 Hz")
  field(ASG, "OPERATOR")
  field(FLNK, "$(LN){}Mode:Prmt-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(mbbo, "$(BR){}Mode-Sel") {
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "0xc")
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(ASG, "OPERATOR")
  field(FLNK, "$(BR){}Mode:Prmt1-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# User Control
record(mbboDirect, "$(BR){}Mode:Prmt-Sel") {
  field(DESC, "BR Permitted TS Modes")
  field(FLNK, "$(BR){}Mode:Prmt1-Calc_")
  field(ASG, "OPERATOR")
  field(NOBT, "3")
  field(DTYP, "Soft and restore")
  info(autosaveFields_pass0, "VAL")
}

# Extract BR 1Hz pattern mask
record(calcout, "$(BR){}Mode:Prmt1-Calc_") {
  field(FLNK, "$(BR){}Mode:PrmtS-Calc_")
  field(CALC, "D:=A&(1<<(B-1));E:=D?B:0;D?C&1:0")
  field(INPB, "$(BR){}Mode-Sel NPP MS")
  field(OUT, "$(BR){Seq:1Hz}Mask:Rep-SP NPP")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
  field(INPA, "$(BR){}Mode:Prmt-Sel NPP MS")
  field(INPC, "$(BR){}Mode-Sel.RVAL")
}

record(calcout, "$(INJ){}Mode-RB_") {
  field(FLNK, "$(INJ){}Mode-RB")
  field(CALC, "(A&E)<<4|(D&3)<<2|(C&1)<<1|B&1")
  field(INPA, "$(LN){Seq}Mask:Rep-SP NPP MS")
  field(INPB, "$(BR){Seq:1Hz}Mask:Rep-SP NPP MS")
  field(OUT, "$(INJ){}Mode:Allw1-Calc_.A PP MS")
  field(INPC, "$(BR){Seq:Stk}Mask:Rep-SP NPP MS")
  field(INPD, "$(BR){Seq:2Hz}Mask:Rep-SP NPP MS")
  field(INPE, "0x3ff")
}

record(mbbiDirect, "$(INJ){}Mode-RB") {
  field(NOBT, "14")
  field(INP, "$(INJ){}Mode-RB_ NPP MS")
}

# User Control
record(bo, "$(INJ){}Mode:Prmt-Sel") {
  field(ZNAM, "Allow any")
  field(ONAM, "Require BR Inject")
  field(ASG, "OPERATOR")
  field(FLNK, "$(INJ){}Mode:Allw2-Calc_")
  info(autosaveFields_pass0, "VAL")
}

# Compare against modes which allow BR injection
record(calcout, "$(INJ){}Mode:Allw1-Calc_") {
  field(FLNK, "$(INJ){}Mode:Allw-RB")
  field(CALC, "(A==B)||(A==C)||(A==D)")
  field(INPB, "0x11")
  field(INPC, "0x32")
  field(INPD, "0x21c")
  field(OUT, "$(INJ){}Mode:Allw2-Calc_.A PP MS")
}

record(calcout, "$(INJ){}Mode:Allw2-Calc_") {
  field(CALC, "B?A:1")
  field(INPB, "$(INJ){}Mode:Prmt-Sel PP MS")
  field(OUT, "$(INJ){}Mode:Prmt-RB.VAL PP MS")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
}

# User Control
record(bo, "$(INJ){}Mode:Commit-Cmd") {
  field(FLNK, "$(INJ){}Mode:Commit-Calc_")
  field(ZNAM, "Commit")
  field(ONAM, "Commit")
  field(ASG, "OPERATOR")
}

# Only allow commit operation if mode validation permits
record(calcout, "$(INJ){}Mode:Commit-Calc_") {
  field(CALC, "A")
  field(INPA, "$(INJ){}Mode:Prmt-RB.VAL PP MS")
  field(OUT, "$(INJ){}Mode:Commit-FO_.PROC")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "1")
  field(IVOA, "Don't drive outputs")
}

record(fanout, "$(INJ){}Mode:Commit-FO_") {
  field(LNK1, "$(INJ){$(EVG)-$(SEQ,undefined)}Commit-Cmd.PROC")
  field(LNK2, "$(INJ){}Mode-I")
  field(LNK3, "$(INJ){}Mode:Allw-Sts")
  field(LNK4, "$(BR){}Mode-Sts")
  field(LNK5, "$(LN){}Mode-Sts")
}

record(mbbiDirect, "$(INJ){}Mode-I") {
  field(NOBT, "14")
  field(INP, "$(INJ){}Mode-RB")
}

record(bi, "$(INJ){}Mode:Prmt-RB") {
  field(ZSV, "MAJOR")
  field(ZNAM, "Incompatible modes")
  field(ONAM, "OK")
}

record(mbbi, "$(BR){}Mode-Sts") {
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(INP, "$(BR){}Mode-Sel NPP")
}

record(mbbi, "$(LN){}Mode-Sts") {
  field(ZRST, "Off")
  field(ONST, "1 Hz")
  field(TWST, "Stack")
  field(THST, "2 Hz")
  field(FRST, "5 Hz")
  field(FVST, "10 Hz")
  field(INP, "$(LN){}Mode-Sel NPP")
}

record(bi, "$(INJ){}Mode:Allw-RB") {
  field(DESC, "TS modes permits inject")
  field(INP, "$(INJ){}Mode:Allw1-Calc_ NPP MS")
  field(ZSV, "MINOR")
  field(ZNAM, "BR Inj Denied")
  field(ONAM, "BR Inj Allowed")
}

record(bi, "$(INJ){}Mode:Allw-Sts") {
  field(DESC, "TS modes permits inject")
  field(INP, "$(INJ){}Mode:Allw-RB.VAL NPP MS")
  field(ZSV, "MINOR")
  field(ZNAM, "BR Inj Denied")
  field(ONAM, "BR Inj Allowed")
}

record(fanout, "$(INJ){}Mode:Init-FO_") {
  field(PINI, "RUNNING")
  field(PHAS, "1")
  field(LNK1, "$(LN){}Mode:Prmt-Sel")
  field(LNK2, "$(BR){}Mode:Prmt-Sel")
  field(LNK3, "$(LN){}Mode-Sel")
  field(LNK4, "$(BR){}Mode-Sel")
  field(LNK6, "$(INJ){}Mode:Commit-Cmd")
}

record(fanout, "$(BR){}Mode:Prmt-FO_") {
  field(LNK1, "$(BR){Seq:1Hz}Mask:Rep-SP")
  field(LNK2, "$(BR){Seq:Stk}Mask:Rep-SP")
  field(LNK3, "$(BR){Seq:2Hz}Mask:Rep-SP")
  field(LNK4, "$(INJ){}Mode-RB_ ")
}

# Extract BR Stacked pattern mask
record(calcout, "$(BR){}Mode:PrmtS-Calc_") {
  field(FLNK, "$(BR){}Mode:Prmt2-Calc_")
  field(CALC, "D:=A&(1<<(B-1));E:=D?B:0;D?(C>>1)&1:0")
  field(INPB, "$(BR){}Mode-Sel NPP MS")
  field(OUT, "$(BR){Seq:Stk}Mask:Rep-SP NPP")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
  field(INPA, "$(BR){}Mode:Prmt-Sel NPP MS")
  field(INPC, "$(BR){}Mode-Sel.RVAL")
}

# Extract BR 2Hz pattern mask
record(calcout, "$(BR){}Mode:Prmt2-Calc_") {
  field(FLNK, "$(BR){}Mode:Prmt-FO_")
  field(CALC, "D:=A&(1<<(B-1));E:=D?B:0;D?(C>>2)&3:0")
  field(INPB, "$(BR){}Mode-Sel NPP MS")
  field(OUT, "$(BR){Seq:2Hz}Mask:Rep-SP NPP")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
  field(INPA, "$(BR){}Mode:Prmt-Sel NPP MS")
  field(INPC, "$(BR){}Mode-Sel.RVAL")
}

#! Further lines contain data used by VisualDCT
#! View(3076,2043,1.0)
#! Record("$(LN){}Mode:Prmt-Sel",2620,1954,0,0,"$(LN){}Mode:Prmt-Sel")
#! Field("$(LN){}Mode:Prmt-Sel.VAL",16777215,0,"$(LN){}Mode:Prmt-Sel.VAL")
#! Field("$(LN){}Mode:Prmt-Sel.FLNK",16777215,1,"$(LN){}Mode:Prmt-Sel.FLNK")
#! Link("$(LN){}Mode:Prmt-Sel.FLNK","$(LN){}Mode:Prmt-Calc_")
#! Record("$(LN){}Mode:Prmt-Calc_",2660,2152,0,1,"$(LN){}Mode:Prmt-Calc_")
#! Field("$(LN){}Mode:Prmt-Calc_.OUT",16777215,1,"$(LN){}Mode:Prmt-Calc_.OUT")
#! Field("$(LN){}Mode:Prmt-Calc_.FLNK",16777215,1,"$(LN){}Mode:Prmt-Calc_.FLNK")
#! Link("$(LN){}Mode:Prmt-Calc_.FLNK","$(INJ){}Mode-RB_")
#! Field("$(LN){}Mode:Prmt-Calc_.INPA",16777215,0,"$(LN){}Mode:Prmt-Calc_.INPA")
#! Link("$(LN){}Mode:Prmt-Calc_.INPA","$(LN){}Mode:Prmt-Sel.VAL")
#! Field("$(LN){}Mode:Prmt-Calc_.INPB",16777215,0,"$(LN){}Mode:Prmt-Calc_.INPB")
#! Link("$(LN){}Mode:Prmt-Calc_.INPB","$(LN){}Mode-Sel.VAL")
#! Field("$(LN){}Mode:Prmt-Calc_.INPC",16777215,0,"$(LN){}Mode:Prmt-Calc_.INPC")
#! Link("$(LN){}Mode:Prmt-Calc_.INPC","$(LN){}Mode-Sel.RVAL")
#! Record("$(LN){}Mode-Sel",2340,2089,0,0,"$(LN){}Mode-Sel")
#! Field("$(LN){}Mode-Sel.VAL",16777215,1,"$(LN){}Mode-Sel.VAL")
#! Field("$(LN){}Mode-Sel.RVAL",16777215,1,"$(LN){}Mode-Sel.RVAL")
#! Field("$(LN){}Mode-Sel.FLNK",16777215,0,"$(LN){}Mode-Sel.FLNK")
#! Link("$(LN){}Mode-Sel.FLNK","$(LN){}Mode-Sel/FLNK")
#! Connector("$(LN){}Mode-Sel/FLNK","$(LN){}Mode:Prmt-Calc_",2520,2313,16777215,"",0)
#! Record("$(BR){}Mode-Sel",2340,2645,0,0,"$(BR){}Mode-Sel")
#! Field("$(BR){}Mode-Sel.VAL",16777215,1,"$(BR){}Mode-Sel.VAL")
#! Field("$(BR){}Mode-Sel.RVAL",16777215,1,"$(BR){}Mode-Sel.RVAL")
#! Field("$(BR){}Mode-Sel.FLNK",16777215,0,"$(BR){}Mode-Sel.FLNK")
#! Link("$(BR){}Mode-Sel.FLNK","$(BR){}Mode-Sel/FLNK")
#! Connector("$(BR){}Mode-Sel/FLNK","$(BR){}Mode:Prmt1-Calc_",2520,2853,16777215,"",0)
#! Record("$(BR){}Mode:Prmt-Sel",2620,2514,0,0,"$(BR){}Mode:Prmt-Sel")
#! Field("$(BR){}Mode:Prmt-Sel.VAL",16777215,1,"$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(BR){}Mode:Prmt-Sel.FLNK",16777215,1,"$(BR){}Mode:Prmt-Sel.FLNK")
#! Link("$(BR){}Mode:Prmt-Sel.FLNK","$(BR){}Mode:Prmt1-Calc_")
#! Record("$(BR){}Mode:Prmt1-Calc_",2660,2732,0,1,"$(BR){}Mode:Prmt1-Calc_")
#! Field("$(BR){}Mode:Prmt1-Calc_.OUT",16777215,1,"$(BR){}Mode:Prmt1-Calc_.OUT")
#! Field("$(BR){}Mode:Prmt1-Calc_.FLNK",16777215,0,"$(BR){}Mode:Prmt1-Calc_.FLNK")
#! Link("$(BR){}Mode:Prmt1-Calc_.FLNK","$(BR){}Mode:PrmtS-Calc_")
#! Field("$(BR){}Mode:Prmt1-Calc_.INPA",16777215,0,"$(BR){}Mode:Prmt1-Calc_.INPA")
#! Link("$(BR){}Mode:Prmt1-Calc_.INPA","$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(BR){}Mode:Prmt1-Calc_.INPB",16777215,0,"$(BR){}Mode:Prmt1-Calc_.INPB")
#! Link("$(BR){}Mode:Prmt1-Calc_.INPB","$(BR){}Mode-Sel.VAL")
#! Field("$(BR){}Mode:Prmt1-Calc_.INPC",16777215,0,"$(BR){}Mode:Prmt1-Calc_.INPC")
#! Link("$(BR){}Mode:Prmt1-Calc_.INPC","$(BR){}Mode-Sel.RVAL")
#! Record("$(INJ){}Mode-RB_",3100,2352,0,1,"$(INJ){}Mode-RB_")
#! Field("$(INJ){}Mode-RB_.INPA",16777215,0,"$(INJ){}Mode-RB_.INPA")
#! Field("$(INJ){}Mode-RB_.INPB",16777215,0,"$(INJ){}Mode-RB_.INPB")
#! Field("$(INJ){}Mode-RB_.INPC",16777215,1,"$(INJ){}Mode-RB_.INPC")
#! Field("$(INJ){}Mode-RB_.INPD",16777215,1,"$(INJ){}Mode-RB_.INPD")
#! Field("$(INJ){}Mode-RB_.VAL",16777215,0,"$(INJ){}Mode-RB_.VAL")
#! Field("$(INJ){}Mode-RB_.OUT",16777215,1,"$(INJ){}Mode-RB_.OUT")
#! Link("$(INJ){}Mode-RB_.OUT","$(INJ){}Mode:Allw1-Calc_.A")
#! Field("$(INJ){}Mode-RB_.FLNK",16777215,0,"$(INJ){}Mode-RB_.FLNK")
#! Link("$(INJ){}Mode-RB_.FLNK","$(INJ){}Mode-RB")
#! Record("$(INJ){}Mode-RB",3100,2676,0,0,"$(INJ){}Mode-RB")
#! Field("$(INJ){}Mode-RB.INP",16777215,0,"$(INJ){}Mode-RB.INP")
#! Link("$(INJ){}Mode-RB.INP","$(INJ){}Mode-RB_.VAL")
#! Field("$(INJ){}Mode-RB.VAL",16777215,1,"$(INJ){}Mode-RB.VAL")
#! Record("$(INJ){}Mode:Prmt-Sel",3760,2168,0,0,"$(INJ){}Mode:Prmt-Sel")
#! Field("$(INJ){}Mode:Prmt-Sel.VAL",16777215,1,"$(INJ){}Mode:Prmt-Sel.VAL")
#! Field("$(INJ){}Mode:Prmt-Sel.FLNK",16777215,0,"$(INJ){}Mode:Prmt-Sel.FLNK")
#! Link("$(INJ){}Mode:Prmt-Sel.FLNK","$(INJ){}Mode:Allw2-Calc_")
#! Record("$(INJ){}Mode:Allw1-Calc_",3440,2400,0,1,"$(INJ){}Mode:Allw1-Calc_")
#! Field("$(INJ){}Mode:Allw1-Calc_.VAL",16777215,1,"$(INJ){}Mode:Allw1-Calc_.VAL")
#! Field("$(INJ){}Mode:Allw1-Calc_.FLNK",16777215,0,"$(INJ){}Mode:Allw1-Calc_.FLNK")
#! Link("$(INJ){}Mode:Allw1-Calc_.FLNK","$(INJ){}Mode:Allw-RB")
#! Field("$(INJ){}Mode:Allw1-Calc_.A",16777215,0,"$(INJ){}Mode:Allw1-Calc_.A")
#! Field("$(INJ){}Mode:Allw1-Calc_.OUT",16777215,1,"$(INJ){}Mode:Allw1-Calc_.OUT")
#! Link("$(INJ){}Mode:Allw1-Calc_.OUT","$(INJ){}Mode:Allw2-Calc_.A")
#! Record("$(INJ){}Mode:Allw2-Calc_",3740,2394,0,0,"$(INJ){}Mode:Allw2-Calc_")
#! Field("$(INJ){}Mode:Allw2-Calc_.INPB",16777215,1,"$(INJ){}Mode:Allw2-Calc_.INPB")
#! Link("$(INJ){}Mode:Allw2-Calc_.INPB","$(INJ){}Mode:Prmt-Sel.VAL")
#! Field("$(INJ){}Mode:Allw2-Calc_.A",16777215,0,"$(INJ){}Mode:Allw2-Calc_.A")
#! Field("$(INJ){}Mode:Allw2-Calc_.OUT",16777215,1,"$(INJ){}Mode:Allw2-Calc_.OUT")
#! Link("$(INJ){}Mode:Allw2-Calc_.OUT","$(INJ){}Mode:Prmt-RB.VAL")
#! Record("$(INJ){}Mode:Commit-Cmd",3460,2768,0,0,"$(INJ){}Mode:Commit-Cmd")
#! Field("$(INJ){}Mode:Commit-Cmd.FLNK",16777215,1,"$(INJ){}Mode:Commit-Cmd.FLNK")
#! Link("$(INJ){}Mode:Commit-Cmd.FLNK","$(INJ){}Mode:Commit-Calc_")
#! Record("$(INJ){}Mode:Commit-Calc_",3780,2806,0,0,"$(INJ){}Mode:Commit-Calc_")
#! Field("$(INJ){}Mode:Commit-Calc_.INPA",16777215,0,"$(INJ){}Mode:Commit-Calc_.INPA")
#! Link("$(INJ){}Mode:Commit-Calc_.INPA","$(INJ){}Mode:Prmt-RB.VAL")
#! Field("$(INJ){}Mode:Commit-Calc_.OUT",16777215,1,"$(INJ){}Mode:Commit-Calc_.OUT")
#! Link("$(INJ){}Mode:Commit-Calc_.OUT","$(INJ){}Mode:Commit-FO_.PROC")
#! Record("$(INJ){}Mode:Commit-FO_",4060,3074,0,1,"$(INJ){}Mode:Commit-FO_")
#! Field("$(INJ){}Mode:Commit-FO_.PROC",16777215,0,"$(INJ){}Mode:Commit-FO_.PROC")
#! Field("$(INJ){}Mode:Commit-FO_.LNK1",16777215,1,"$(INJ){}Mode:Commit-FO_.LNK1")
#! Field("$(INJ){}Mode:Commit-FO_.LNK2",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK2")
#! Link("$(INJ){}Mode:Commit-FO_.LNK2","$(INJ){}Mode-I")
#! Field("$(INJ){}Mode:Commit-FO_.LNK3",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK3")
#! Link("$(INJ){}Mode:Commit-FO_.LNK3","$(INJ){}Mode:Allw-Sts")
#! Field("$(INJ){}Mode:Commit-FO_.LNK4",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK4")
#! Link("$(INJ){}Mode:Commit-FO_.LNK4","$(BR){}Mode-Sts")
#! Field("$(INJ){}Mode:Commit-FO_.LNK5",16777215,0,"$(INJ){}Mode:Commit-FO_.LNK5")
#! Link("$(INJ){}Mode:Commit-FO_.LNK5","$(LN){}Mode-Sts")
#! Record("$(INJ){}Mode-I",3620,3156,0,1,"$(INJ){}Mode-I")
#! Field("$(INJ){}Mode-I.INP",16777215,0,"$(INJ){}Mode-I.INP")
#! Link("$(INJ){}Mode-I.INP","$(INJ){}Mode-RB.VAL")
#! Record("$(INJ){}Mode:Prmt-RB",3780,2602,0,1,"$(INJ){}Mode:Prmt-RB")
#! Field("$(INJ){}Mode:Prmt-RB.VAL",16777215,1,"$(INJ){}Mode:Prmt-RB.VAL")
#! Record("$(BR){}Mode-Sts",2340,3054,0,1,"$(BR){}Mode-Sts")
#! Field("$(BR){}Mode-Sts.INP",16777215,0,"$(BR){}Mode-Sts.INP")
#! Link("$(BR){}Mode-Sts.INP","$(BR){}Mode-Sel.VAL")
#! Record("$(LN){}Mode-Sts",2340,3326,0,1,"$(LN){}Mode-Sts")
#! Field("$(LN){}Mode-Sts.INP",16777215,0,"$(LN){}Mode-Sts.INP")
#! Link("$(LN){}Mode-Sts.INP","$(LN){}Mode-Sts/INP")
#! Connector("$(LN){}Mode-Sts/INP","$(LN){}Mode-Sel.VAL",2100,2920,16777215,"",0)
#! Record("$(INJ){}Mode:Allw-RB",3420,2214,0,0,"$(INJ){}Mode:Allw-RB")
#! Field("$(INJ){}Mode:Allw-RB.INP",16777215,1,"$(INJ){}Mode:Allw-RB.INP")
#! Link("$(INJ){}Mode:Allw-RB.INP","$(INJ){}Mode:Allw1-Calc_.VAL")
#! Field("$(INJ){}Mode:Allw-RB.VAL",16777215,1,"$(INJ){}Mode:Allw-RB.VAL")
#! Record("$(INJ){}Mode:Allw-Sts",3380,2994,0,1,"$(INJ){}Mode:Allw-Sts")
#! Field("$(INJ){}Mode:Allw-Sts.INP",16777215,1,"$(INJ){}Mode:Allw-Sts.INP")
#! Link("$(INJ){}Mode:Allw-Sts.INP","$(INJ){}Mode:Allw-RB.VAL")
#! Record("$(INJ){}Mode:Init-FO_",1620,1940,0,1,"$(INJ){}Mode:Init-FO_")
#! Field("$(INJ){}Mode:Init-FO_.LNK1",16777215,1,"$(INJ){}Mode:Init-FO_.LNK1")
#! Link("$(INJ){}Mode:Init-FO_.LNK1","$(INJ){}Mode:Init-FO_/LNK1")
#! Field("$(INJ){}Mode:Init-FO_.LNK2",16777215,1,"$(INJ){}Mode:Init-FO_.LNK2")
#! Link("$(INJ){}Mode:Init-FO_.LNK2","$(INJ){}Mode:Init-FO_/LNK22")
#! Field("$(INJ){}Mode:Init-FO_.LNK3",16777215,1,"$(INJ){}Mode:Init-FO_.LNK3")
#! Link("$(INJ){}Mode:Init-FO_.LNK3","$(INJ){}Mode:Init-FO_/LNK31")
#! Field("$(INJ){}Mode:Init-FO_.LNK4",16777215,1,"$(INJ){}Mode:Init-FO_.LNK4")
#! Link("$(INJ){}Mode:Init-FO_.LNK4","$(INJ){}Mode:Init-FO_/LNK4")
#! Field("$(INJ){}Mode:Init-FO_.LNK6",16777215,1,"$(INJ){}Mode:Init-FO_.LNK6")
#! Link("$(INJ){}Mode:Init-FO_.LNK6","$(INJ){}Mode:Init-FO_/LNK6")
#! Connector("$(INJ){}Mode:Init-FO_/LNK22","$(INJ){}Mode:Init-FO_/LNK2",1960,2040,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK2","$(BR){}Mode:Prmt-Sel",2560,2540,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK1","$(INJ){}Mode:Init-FO_/LNK12",1920,2060,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK12","$(LN){}Mode:Prmt-Sel",2560,2020,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK6","$(INJ){}Mode:Init-FO_/LNK61",1860,2220,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK61","$(INJ){}Mode:Commit-Cmd",3460,2700,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK4","$(INJ){}Mode:Init-FO_/LNK41",1940,2260,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK41","$(BR){}Mode-Sel",2340,2580,16777215,"",0)
#! Connector("$(INJ){}Mode:Init-FO_/LNK31","$(INJ){}Mode:Init-FO_/LNK3",2000,2020,16777215,"",1)
#! Connector("$(INJ){}Mode:Init-FO_/LNK3","$(LN){}Mode-Sel",2240,2220,16777215,"",0)
#! Record("$(BR){}Mode:Prmt-FO_",3080,3348,0,1,"$(BR){}Mode:Prmt-FO_")
#! Field("$(BR){}Mode:Prmt-FO_.LNK1",16777215,1,"$(BR){}Mode:Prmt-FO_.LNK1")
#! Field("$(BR){}Mode:Prmt-FO_.LNK2",16777215,1,"$(BR){}Mode:Prmt-FO_.LNK2")
#! Field("$(BR){}Mode:Prmt-FO_.LNK3",16777215,1,"$(BR){}Mode:Prmt-FO_.LNK3")
#! Field("$(BR){}Mode:Prmt-FO_.LNK4",16777215,0,"$(BR){}Mode:Prmt-FO_.LNK4")
#! Link("$(BR){}Mode:Prmt-FO_.LNK4","$(INJ){}Mode-RB_")
#! Record("$(BR){}Mode:PrmtS-Calc_",2660,3112,0,0,"$(BR){}Mode:PrmtS-Calc_")
#! Field("$(BR){}Mode:PrmtS-Calc_.FLNK",16777215,1,"$(BR){}Mode:PrmtS-Calc_.FLNK")
#! Link("$(BR){}Mode:PrmtS-Calc_.FLNK","$(BR){}Mode:Prmt2-Calc_")
#! Field("$(BR){}Mode:PrmtS-Calc_.INPB",16777215,0,"$(BR){}Mode:PrmtS-Calc_.INPB")
#! Link("$(BR){}Mode:PrmtS-Calc_.INPB","$(BR){}Mode-Sel.VAL")
#! Field("$(BR){}Mode:PrmtS-Calc_.OUT",16777215,1,"$(BR){}Mode:PrmtS-Calc_.OUT")
#! Field("$(BR){}Mode:PrmtS-Calc_.INPA",16777215,0,"$(BR){}Mode:PrmtS-Calc_.INPA")
#! Link("$(BR){}Mode:PrmtS-Calc_.INPA","$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(BR){}Mode:PrmtS-Calc_.INPC",16777215,0,"$(BR){}Mode:PrmtS-Calc_.INPC")
#! Link("$(BR){}Mode:PrmtS-Calc_.INPC","$(BR){}Mode-Sel.RVAL")
#! Record("$(BR){}Mode:Prmt2-Calc_",2960,2852,0,0,"$(BR){}Mode:Prmt2-Calc_")
#! Field("$(BR){}Mode:Prmt2-Calc_.INPB",16777215,0,"$(BR){}Mode:Prmt2-Calc_.INPB")
#! Link("$(BR){}Mode:Prmt2-Calc_.INPB","$(BR){}Mode-Sel.VAL")
#! Field("$(BR){}Mode:Prmt2-Calc_.OUT",16777215,1,"$(BR){}Mode:Prmt2-Calc_.OUT")
#! Field("$(BR){}Mode:Prmt2-Calc_.INPA",16777215,0,"$(BR){}Mode:Prmt2-Calc_.INPA")
#! Link("$(BR){}Mode:Prmt2-Calc_.INPA","$(BR){}Mode:Prmt-Sel.VAL")
#! Field("$(BR){}Mode:Prmt2-Calc_.INPC",16777215,0,"$(BR){}Mode:Prmt2-Calc_.INPC")
#! Link("$(BR){}Mode:Prmt2-Calc_.INPC","$(BR){}Mode-Sel.RVAL")
#! Field("$(BR){}Mode:Prmt2-Calc_.FLNK",16777215,1,"$(BR){}Mode:Prmt2-Calc_.FLNK")
#! Link("$(BR){}Mode:Prmt2-Calc_.FLNK","$(BR){}Mode:Prmt-FO_")
#! TextBox(TB0,2340,2040,2520,2080,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB5,3760,2120,3940,2160,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB4,2620,2480,2800,2520,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB3,2620,1900,2800,1940,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB2,3460,2720,3640,2760,0,"Dialog",24,1,16724787,"User Control",null)
#! TextBox(TB1,2340,2600,2520,2640,0,"Dialog",24,1,16724787,"User Control",null)

alias("$(INJ){$(EVG)-Mxc:2}Prescaler-RB","$(INJ){$(EVG)}Div:10K-RB")
alias("$(INJ){$(EVG)-Mxc:6}Prescaler-RB","$(INJ){$(EVG)}Div:1-RB")

record(calc, "$(BR){}Ratio:10Kto1-I") {
    field(INPA, "$(INJ){$(EVG)}Div:10K-RB CP MS") # 10 KHz divider
    field(INPB, "$(INJ){$(EVG)}Div:1-RB CP MS") # 1 Hz divider
    field(CALC, "B/A")
    field(HIGH, "11000")
    field(LOW , "9000")
    field(HSV , "INVALID")
    field(LSV , "INVALID")
    field(FLNK, "$(BR){}Ratio:10Kto2-I")
}

record(calc, "$(BR){}Ratio:10Kto2-I") {
    field(INPA, "$(BR){}Ratio:10Kto1-I NPP MS")
    field(CALC, "A/2")
    field(FLNK, "$(BR){}Ratio:10K-I")
}

record(calc, "$(BR){}Ratio:10K-I") {
    field(DESC, "Ratio of 10KHz to rep rate")
    field(INPA, "$(BR){}Ratio:10Kto1-I NPP MS")
    field(INPB, "$(BR){}Ratio:10Kto2-I NPP MS")
    field(INPC, "$(BR){}Mode-Sel CP MS")
    field(CALC, "C==3?B:A")
}
# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(LN){Seq}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(LN){Seq}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq}EvtCode-RB")
}

record(waveform, "$(LN){Seq}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(LN){Seq}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(LN){Seq}Timestamp-RB")
}

record(longout, "$(LN){Seq}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(LN){Seq}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")
}

# Calculation


record(aSub, "$(LN){Seq}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ,undefined){$(EVG,undefined)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "10")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(LN){Seq}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(LN){Seq}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(LN){Seq}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "$(INJ){Seq:Out}Rep-Calc_")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:1Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:1Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:1Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:1Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:1Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:1Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:1Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ,undefined){$(EVG,undefined)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:1Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:1Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:1Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "$(INJ){Seq:Out}Rep-Calc_")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:Stk}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:Stk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:Stk}EvtCode-RB")
}

record(waveform, "$(BR){Seq:Stk}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:Stk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:Stk}Timestamp-RB")
}

record(longout, "$(BR){Seq:Stk}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:Stk}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:Stk}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ,undefined){$(EVG,undefined)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "1")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:Stk}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:Stk}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:Stk}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "$(INJ){Seq:Out}Rep-Calc_")
}

# Soft sequence repeater
#
# Macros
#  P - PV prefix
#  NELM - Element count
#  NREP - Number of repetitions
#  CYCLELEN - Number of ticks of the total cycle length.
#  FLNK

# Inputs

record(waveform, "$(BR){Seq:2Hz}EvtCode-SP") {
    field( DESC, "Sequence event code array")
    field( NELM, "2048")
    field( FTVL, "UCHAR")
    field( FLNK, "$(BR){Seq:2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:2Hz}EvtCode-RB")
}

record(waveform, "$(BR){Seq:2Hz}Timestamp-SP") {
    field( DESC, "Sequence timestamp array")
    field( NELM, "2048")
    field( FTVL, "DOUBLE")
    field( FLNK, "$(BR){Seq:2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")

    alias("$(BR){Seq:2Hz}Timestamp-RB")
}

record(longout, "$(BR){Seq:2Hz}Mask:Rep-SP") {
    field( DESC, "Mask selecting repeated slots")
    field( FLNK, "$(BR){Seq:2Hz}Rep-Calc_")
    info( autosaveFields_pass1, "VAL")
}

# Calculation


record(aSub, "$(BR){Seq:2Hz}Rep-Calc_") {
    field( SNAM, "Seq Repeat")
    # A - cycle length in ticks
    field( INPA, "$(INJ,undefined){$(EVG,undefined)}Div:1-RB MS")
    field( FTA , "ULONG")
    # B - # of repetitions per cycle
    field( INPB, "2")
    field( FTB , "ULONG")
    # C - Bit mask to select which repetitions should actually be issued
    field( INPC, "$(BR){Seq:2Hz}Mask:Rep-SP MS PP")
    field( FTC , "ULONG")
    # D - Unused
    field( INPD, "$(BR){Seq:2Hz}Timestamp-SP MS PP")
    field( FTD , "DOUBLE")
    field( NOD , "2048")
    # E - Input waveform
    field( INPE, "$(BR){Seq:2Hz}EvtCode-SP MS PP")
    field( FTE , "UCHAR")
    field( NOE , "2048")

    # VALA - Single rep. cycle time
    field( FTVA, "DOUBLE")
    # VALB - Full output waveform
    field( FTVB, "DOUBLE")
    field( NOVB, "2048")
    field( FTVC, "UCHAR")
    field( NOVC, "2048")

    field( EFLG, "ALWAYS")

    field( FLNK, "$(INJ){Seq:Out}Rep-Calc_")
}

# Soft sequence merger
#
# Macros
#  P - PV prefix
#  NELM
#  TIMEA
#  CODEA
#  TIMEB
#  CODEB
#  ...
#  OUTTIME
#  OUTCODE
#

record(aSub, "$(INJ){Seq:Out}Rep-Calc_") {
    field(SNAM, "Seq Merge")

    field(FTA, "DOUBLE")
    field(FTB, "UCHAR")
    field(FTC, "DOUBLE")
    field(FTD, "UCHAR")
    field(FTE, "DOUBLE")
    field(FTF, "UCHAR")
    field(FTG, "DOUBLE")
    field(FTH, "UCHAR")

    field(NOA, "2048")
    field(NOB, "2048")
    field(NOC, "2048")
    field(NOD, "2048")
    field(NOE, "2048")
    field(NOF, "2048")
    field(NOG, "2048")
    field(NOH, "2048")

    field(INPA, "$(LN){Seq}Rep-Calc_.VALB MS PP")
    field(INPB, "$(LN){Seq}Rep-Calc_.VALC MS PP")
    field(INPC, "$(BR){Seq:1Hz}Rep-Calc_.VALB MS PP")
    field(INPD, "$(BR){Seq:1Hz}Rep-Calc_.VALC MS PP")
    field(INPE, "$(BR){Seq:Stk}Rep-Calc_.VALB MS PP")
    field(INPF, "$(BR){Seq:Stk}Rep-Calc_.VALC MS PP")
    field(INPG, "$(BR){Seq:2Hz}Rep-Calc_.VALB MS PP")
    field(INPH, "$(BR){Seq:2Hz}Rep-Calc_.VALC MS PP")

    field(FTVA, "DOUBLE")
    field(FTVB, "UCHAR")

    field(NOVA, "2048")
    field(NOVB, "2048")

    field(OUTA, "$(INJ){$(EVG)-$(SEQ)}Timestamp-SP PP")
    field(OUTB, "$(INJ){$(EVG)-$(SEQ)}EvtCode-SP PP")

    field( EFLG, "ALWAYS")
}

